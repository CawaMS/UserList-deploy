'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
// tslint:disable-next-line variable-name
var HttpsProxyAgent = require('https-proxy-agent');
var requestToFetchOptions = function (reqOpts) {
    var options = __assign({}, reqOpts.method && { method: reqOpts.method }, reqOpts.timeout && { timeout: reqOpts.timeout }, reqOpts.gzip && { compress: reqOpts.gzip });
    if (typeof reqOpts.json === 'object') {
        // Add Content-type: application/json header
        if (!reqOpts.headers) {
            reqOpts.headers = {};
        }
        reqOpts.headers['Content-Type'] = 'application/json';
        // Set body to JSON representation of value
        options.body = JSON.stringify(reqOpts.json);
    }
    else {
        if (typeof reqOpts.body !== 'string') {
            options.body = JSON.stringify(reqOpts.body);
        }
        else {
            options.body = reqOpts.body;
        }
    }
    options.headers = reqOpts.headers;
    var uri = reqOpts.uri;
    if (reqOpts.useQuerystring === true || typeof reqOpts.qs === 'object') {
        var qs = require('querystring');
        var params = qs.stringify(reqOpts.qs);
        uri = uri + '?' + params;
    }
    if (reqOpts.proxy || process.env.HTTP_PROXY || process.env.HTTPS_PROXY) {
        var proxy = (process.env.HTTP_PROXY || process.env.HTTPS_PROXY);
        options.agent = new HttpsProxyAgent(proxy);
    }
    return [uri, options];
};
var fetchToRequestResponse = function (res) {
    var response = {
        statusCode: res.status,
        statusMessage: res.statusText,
    };
    return response;
};
var teenyRequest = (function (reqOpts, callback) {
    var _a = requestToFetchOptions(reqOpts), uri = _a[0], options = _a[1];
    node_fetch_1.default(uri, options)
        .then(function (res) {
        var header = res.headers.get('content-type');
        if (header === 'application/json' ||
            header === 'application/json; charset=utf-8') {
            var response_1 = fetchToRequestResponse(res);
            res.json()
                .then(function (json) {
                response_1.body = json;
                callback(null, response_1, json);
            })
                .catch(function (err) {
                callback(err);
            });
            return;
        }
        res.text()
            .then(function (text) {
            var response = fetchToRequestResponse(res);
            response.body = text;
            callback(null, response, text);
        })
            .catch(function (err) {
            callback(err);
        });
    })
        .catch(function (err) {
        callback(err);
    });
});
exports.teenyRequest = teenyRequest;
teenyRequest.defaults = function (defaults) {
    return function (reqOpts, callback) {
        teenyRequest(__assign({}, defaults, reqOpts), callback);
    };
};
//# sourceMappingURL=index.js.map