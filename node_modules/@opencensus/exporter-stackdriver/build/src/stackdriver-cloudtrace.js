"use strict";
/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@opencensus/core");
const core_2 = require("@opencensus/core");
const google_auth_library_1 = require("google-auth-library");
const googleapis_1 = require("googleapis");
googleapis_1.google.options({ headers: { 'x-opencensus-outgoing-request': 0x1 } });
const cloudTrace = googleapis_1.google.cloudtrace('v1');
/** Format and sends span information to Stackdriver */
class StackdriverTraceExporter {
    constructor(options) {
        this.failBuffer = [];
        this.projectId = options.projectId;
        this.logger = options.logger || core_2.logger.logger();
        this.exporterBuffer = new core_1.ExporterBuffer(this, options);
    }
    /**
     * Is called whenever a span is ended.
     * @param root the ended span
     */
    onEndSpan(root) {
        this.exporterBuffer.addToBuffer(root);
    }
    /** Not used for this exporter */
    onStartSpan(root) { }
    /**
     * Publishes a list of root spans to Stackdriver.
     * @param rootSpans
     */
    publish(rootSpans) {
        const stackdriverTraces = rootSpans.map(trace => this.translateTrace(trace));
        return this.authorize(stackdriverTraces)
            .then((traces) => {
            return this.sendTrace(traces);
        })
            .catch(err => {
            for (const root of rootSpans) {
                this.failBuffer.push(root.spanContext);
            }
            return err;
        });
    }
    /**
     * Translates root span data to Stackdriver's trace format.
     * @param root
     */
    translateTrace(root) {
        const spanList = root.spans.map((span) => this.translateSpan(span));
        spanList.push(this.translateSpan(root));
        return { projectId: this.projectId, traceId: root.traceId, spans: spanList };
    }
    /**
     * Translates span data to Stackdriver's span format.
     * @param span
     */
    translateSpan(span) {
        return {
            name: span.name,
            kind: 'SPAN_KIND_UNSPECIFIED',
            spanId: span.id,
            startTime: span.startTime,
            endTime: span.endTime,
            labels: Object.keys(span.attributes)
                .reduce((acc, k) => {
                acc[k] = String(span.attributes[k]);
                return acc;
            }, {})
        };
    }
    /**
     * Sends traces in the Stackdriver format to the service.
     * @param traces
     */
    sendTrace(traces) {
        return new Promise((resolve, reject) => {
            cloudTrace.projects.patchTraces(traces, (err) => {
                if (err) {
                    err.message = `sendTrace error: ${err.message}`;
                    this.logger.error(err.message);
                    reject(err);
                }
                else {
                    const successMsg = 'sendTrace sucessfully';
                    this.logger.debug(successMsg);
                    resolve(successMsg);
                }
            });
        });
    }
    /**
     * Gets the Google Application Credentials from the environment variables,
     * authenticates the client and calls a method to send the traces data.
     * @param stackdriverTraces
     */
    authorize(stackdriverTraces) {
        return google_auth_library_1.auth.getApplicationDefault()
            .then((client) => {
            let authClient = client.credential;
            if (authClient.createScopedRequired &&
                authClient.createScopedRequired()) {
                const scopes = ['https://www.googleapis.com/auth/cloud-platform'];
                authClient = authClient.createScoped(scopes);
            }
            const traces = {
                projectId: client.projectId,
                resource: { traces: stackdriverTraces },
                auth: authClient
            };
            return traces;
        })
            .catch((err) => {
            err.message = `authorize error: ${err.message}`;
            this.logger.error(err.message);
            throw (err);
        });
    }
}
exports.StackdriverTraceExporter = StackdriverTraceExporter;
//# sourceMappingURL=stackdriver-cloudtrace.js.map