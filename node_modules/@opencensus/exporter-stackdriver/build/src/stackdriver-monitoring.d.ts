/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Logger, Measurement, StatsEventListener, View } from '@opencensus/core';
import { StackdriverExporterOptions } from './types';
/** Format and sends Stats to Stackdriver */
export declare class StackdriverStatsExporter implements StatsEventListener {
    private projectId;
    logger: Logger;
    constructor(options: StackdriverExporterOptions);
    /**
     * Is called whenever a view is registered.
     * @param view The registered view.
     */
    onRegisterView(view: View): Promise<{}>;
    /**
     * Is called whenever a measure is recorded.
     * @param views The views associated with the measure
     * @param measurement The measurement recorded
     */
    onRecord(views: View[], measurement: Measurement): Promise<{}>;
    /**
     * Gets the Google Application Credentials from the environment variables
     * and authenticates the client.
     */
    private authorize();
    /**
     * Creates a Stackdriver TimeSeries from a given view and metric value.
     * @param view The view to get TimeSeries information from
     * @param measurement The measurement to get TimeSeries information from
     */
    private createTimeSeriesData(view, measurement);
    /**
     * Formats an OpenCensus Distribution to Stackdriver's format.
     * @param distribution The OpenCensus Distribution Data
     */
    private createDistribution(distribution);
    /**
     * Gets the bucket boundaries in an monotonicaly increasing order.
     * @param buckets The bucket list to get the boundaries from
     */
    private getBucketBoundaries(buckets);
    /**
     * Gets the count value for each bucket
     * @param buckets The bucket list to get the count values from
     */
    private getBucketCounts(buckets);
    /**
     * Creates a Stackdriver LabelDescriptor from given Tags.
     * @param tag The Tags to get TimeSeries information from.
     */
    private createLabelDescriptor(tags);
    /**
     * Creates a Stackdriver MetricDescriptor from a given view.
     * @param view The view to get MetricDescriptor information from
     */
    private createMetricDescriptorData(view);
    /**
     * Creates a Stackdriver ValueType from a given view.
     * @param view The view to extract data from
     */
    private createValueType(view);
    /**
     * Creates a Stackdriver MetricKind from a given aggregation.
     * @param aggregationType The aggregation type to get MetricKind information
     * from.
     */
    private createMetricKind(aggregationType);
}
